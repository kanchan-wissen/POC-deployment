steps:
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'build'
      - '-t'
      - '${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_ARTIFACT_REGISTRY_REPO}/browser-use:${SHORT_SHA}'
      - '-f'
      - 'browser-use-dev/Dockerfile'
      - './browser-use-dev'
    id: 'build-browser-use'

  # Build Image 2
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'build'
      - '-t'
      - '${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_ARTIFACT_REGISTRY_REPO}/n8n:${SHORT_SHA}'
      - '-f'
      - 'n8n/Dockerfile'
      - './n8n'
    id: 'build-n8n'

  # Build Image 3
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'build'
      - '-t'
      - '${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_ARTIFACT_REGISTRY_REPO}/planner-adk:${SHORT_SHA}'
      - '-f'
      - 'planner-adk/Dockerfile'
      - './planner-adk'
    id: 'build-planner-adk'
   # Build Image 4
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'build'
      - '-t'
      - '${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_ARTIFACT_REGISTRY_REPO}/planner-backend:${SHORT_SHA}'
      - '-f'
      - 'planner-backend/Dockerfile'
      - './planner-backend'
    id: 'build-planner-backend'

  # Push Image 1 to Artifact Registry
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'push'
      - '${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_ARTIFACT_REGISTRY_REPO}/browser-use:${SHORT_SHA}'
    id: 'push-browser-use'
    waitFor: ['build-browser-use']

  # Push Image 2 to Artifact Registry
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'push'
      - '${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_ARTIFACT_REGISTRY_REPO}/n8n:${SHORT_SHA}'
    id: 'push-n8n'
    waitFor: ['build-n8n']

  # Push Image 3 to Artifact Registry
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'push'
      - '${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_ARTIFACT_REGISTRY_REPO}/planner-adk:${SHORT_SHA}'
    id: 'push-planner-adk'
    waitFor: ['build-planner-adk']
    # Push Image 4 to Artifact Registry
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'push'
      - '${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_ARTIFACT_REGISTRY_REPO}/planner-backend:${SHORT_SHA}'
    id: 'push-planner-backend'
    waitFor: ['build-planner-backend']

  - name: gcr.io/cloud-builders/gcloud
    id: render-service
    entrypoint: bash
    args:
    - -c
    - |
      set -euo pipefail
      mkdir -p render
      sed -i "s|{{IMG_BROWSER_USE}}|${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_ARTIFACT_REGISTRY_REPO}/browser-use:${SHORT_SHA}|g" service.yaml
      IMG_BROWSER_USE="${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_ARTIFACT_REGISTRY_REPO}/browser-use:${SHORT_SHA}"
      IMG_N8N="${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_ARTIFACT_REGISTRY_REPO}/n8n:${SHORT_SHA}"
      IMG_PLANNER_ADK="${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_ARTIFACT_REGISTRY_REPO}/planner-adk:${SHORT_SHA}"
      IMG_PLANNER_BACKEND="${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_ARTIFACT_REGISTRY_REPO}/planner-backend:${SHORT_SHA}"

      sed \
        -e "s#{{IMG_BROWSER_USE}}#${IMG_BROWSER_USE}#g" \
        -e "s#{{IMG_N8N}}#${IMG_N8N}#g" \
        -e "s#{{IMG_PLANNER_ADK}}#${IMG_PLANNER_ADK}#g" \
        -e "s#{{IMG_PLANNER_BACKEND}}#${IMG_PLANNER_BACKEND}#g" \
        service.yaml > render/service.yaml

      echo "---- render/service.yaml ----"
      cat render/service.yaml
  # -------- Deploy the service (multi-container) --------
  - name: gcr.io/cloud-builders/gcloud
    id: deploy-service
    waitFor:
    - push-browser-use          
    - push-n8n
    - push-planner-adk
    - push-planner-backend
    - render-service
    args:
    - run
    - services
    - replace
    - render/service.yaml
    - --region=${_REGION}

logsBucket: 'agentic-prior-storage-bucket'
options:
  logging: GCS_ONLY
images:
  - '${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_ARTIFACT_REGISTRY_REPO}/browser-use:${SHORT_SHA}'
  - '${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_ARTIFACT_REGISTRY_REPO}/n8n:${SHORT_SHA}'
  - '${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_ARTIFACT_REGISTRY_REPO}/planner-adk:${SHORT_SHA}'
  - '${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_ARTIFACT_REGISTRY_REPO}/planner-backend:${SHORT_SHA}'

  